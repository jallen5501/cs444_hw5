/*********************************************************************
*
*       file:        proc.h
*                    Process structure info
*
*/
#ifndef PROC_H
#define PROC_H
/* number of processes: 3 user processes, 1 proc0 */
#define  NPROC 4

#define  N_SAVED_REGS 7
/* 7 non-scratch CPU registers, saved in this order: */
enum cpu_regs {SAVED_ESP, SAVED_EBX, SAVED_ESI, SAVED_EDI,
	       SAVED_EBP, SAVED_EFLAGS, SAVED_PC};

/* for p_status ( RUN=1, BLOCKED=2, ZOMBIE=3) */
typedef enum proc_status {RUN = 1, BLOCKED, ZOMBIE} ProcStatus;

/* for p_waitcode, what process is waiting for */
typedef enum proc_wait {TTY0_OUTPUT = 1, TTY1_OUTPUT, TTY0_INPUT, TTY1_INPUT} WaitCode;

/* Process Entry */
typedef struct {
  int p_savedregs[N_SAVED_REGS]; /* saved non-scratch registers */
  ProcStatus p_status;   /* RUN, BLOCKED, or ZOMBIE */
  WaitCode p_waitcode;   /* valid only if status=BLOCKED: TTY0_OUT, etc. */
  int p_exitval;         /* valid only if status=ZOMBIE */
	int p_quantum;
	int p_ticks;
	int enqueue_count;
	int p_number;	/***** JA temp testing member	*****/
} PEntry;

/* extern these globals here, define them in tunix.c */
extern PEntry proctab[], *curproc;
extern int process_entry_count[];
#endif /*PROC_H */
/* file: tunix.c core kernel code */

#include <stdio.h>
#include <cpu.h>
#include <gates.h>
#include <pic.h>
#include <timer.h>
#include "tsyscall.h"
#include "tsystm.h"
#include "proc.h"
#include "sched.h"
#include "tickpack.h"

/* for saved eflags register initialization */
#define EFLAGS_IF 0x200
/* for saved esp register--stack bases for user programs */
/* could use enum here */
#define STACKBASE1 0x3f0000
#define STACKBASE2 0x3e0000
#define STACKBASE3 0x3d0000
extern IntHandler syscall; /* the assembler envelope routine    */
extern void ustart1(void),ustart2(void), ustart3(void);
extern void finale(void);

void k_init(void);
void syscallc( int user_eax, int devcode, char *buff , int bufflen);
void debug_set_trap_gate(int n, IntHandler *inthand_addr, int debug);
void set_trap_gate(int n, IntHandler *inthand_addr);
void process0(void), init_proctab(void), shutdown(void);
int sysexit(int);

/* Record debug info in otherwise free memory between program and stack */
/* 0x300000 = 3M, the start of the last M of user memory on the SAPC */
#define DEBUG_AREA 0x300000
char *debug_log_area = (char *)DEBUG_AREA;
char *debug_record;  /* current pointer into log area */ 

/* kernel globals added for scheduler */
PEntry proctab[NPROC],*curproc; 
int number_of_zombie;
int process_entry_count[4];	/***** JA	count for preemptive scheduler ****/
#define MAX_CALL 6

/* syscall dispatch table */
static  struct sysent {
       short   sy_narg;        /* total number of arguments */
       int     (*sy_call)(int, ...);   /* handler */
} sysent[MAX_CALL];

/* end of kernel globals */


/****************************************************************************/
/* k_init: this function for the initialize  of the kernel system*/
/****************************************************************************/

void k_init(void){
	int i;
  debug_record = debug_log_area; /* clear debug log */
  strcpy(debug_record,"");

  cli();
  ioinit();            /* initialize the deivce */ 
  set_trap_gate(0x80, &syscall);   /* SET THE TRAP GATE*/

	/***** JA  turn on pit*****/
	init_ticks(); 
	/***** 			JA				*****/

	for (i=0; i < 4; i++)	
		process_entry_count[i]=0;

  /* Note: Could set these with initializers */
  /* Need to cast function pointer type to keep ANSI C happy */
  sysent[TREAD].sy_call = (int (*)(int, ...))sysread;
  sysent[TWRITE].sy_call = (int (*)(int, ...))syswrite;
  sysent[TEXIT].sy_call = (int (*)(int, ...))sysexit;
 
  sysent[TEXIT].sy_narg = 1;    /* set the arg number of function */
  sysent[TREAD].sy_narg = 3;
  sysent[TIOCTL].sy_narg = 3;
  sysent[TWRITE].sy_narg = 3;

  init_proctab();
  process0();			/* rest of kernel operation (non-init) */
}

/****************************************************************************/
/* process0:  code for process 0: runs when necessary, shuts down            */
/****************************************************************************/
void process0() {

  int i, j;

  /* execution will come back here when restore process 0*/
  while (number_of_zombie < NPROC-1) { /* proc 0 can't be zombie */     
    sti();			/* let proc 0 take interrupts (important!) */
    cli();
    scheduler(1); /***** JA 1 is for this call	*****/
  }
  kprintf("SHUTTING DOWN\n");
  sti();
  for (i=0; i< 1000000; i++)	/***** JA idle loop to make sure preemptive scheduler is working *****/
    ;				/* let output finish (kludge) */
   
  for(i=1;i<NPROC;i++) {
    kprintf("\nEXIT CODE OF PROCESS %d: %d\n", i, proctab[i].p_exitval);
  	kprintf("TICKS IN PROCESS %d: %d\n", i, proctab[i].p_ticks);
		kprintf("CHARACTERS ENQUEUED IN PROCESS %d: %d\n", i, proctab[i].enqueue_count);
	}
	kprintf("\nCALLS TO SCHEDULER:\n");
	kprintf("0 is sysexit 1 and 2 are in tunix.c and 3 is the preemptive scheduler\n");
	for (j=0; j<4; j++)
		kprintf("CALLS TO SCHEDULER %d: %d\n",j,process_entry_count[j]); 

  shutdown();
  /* note that we can return, in process0, to the startup module
     with its int $3.  It's OK to jump to finale, but not necessary */
}
/****************************************************************************/
/* init_proctab: this function for setting init_sp, init_pc              */
/* zeroing out savededp, and set to RUN                                     */
/****************************************************************************/
void init_proctab() {
  int i;

  proctab[1].p_savedregs[SAVED_PC] = (int)&ustart1;
  proctab[2].p_savedregs[SAVED_PC] = (int)&ustart2;
  proctab[3].p_savedregs[SAVED_PC] = (int)&ustart3;
 
  proctab[1].p_savedregs[SAVED_ESP] = STACKBASE1;
  proctab[2].p_savedregs[SAVED_ESP] = STACKBASE2;
  proctab[3].p_savedregs[SAVED_ESP] = STACKBASE3;

  for(i=0;i<NPROC;i++){
    proctab[i].p_savedregs[SAVED_EBP] = 0;
    proctab[i].p_savedregs[SAVED_EFLAGS] = EFLAGS_IF; /* make IF=1 */
    proctab[i].p_status=RUN;
		proctab[i].p_quantum = QUANTUM;
		proctab[i].p_ticks = 0;
		proctab[i].enqueue_count = 0;
		proctab[i].p_number = i;	
  }
  curproc=&proctab[0];
 
  number_of_zombie=0;
}

/* shut the system down */
void shutdown()
{


	/***** JA turn off the timer*****/
	shutdown_ticks();
	
	/*******************************/

  kprintf("SHUTTING THE SYSTEM DOWN!\n");
  kprintf("Debug log from run:\n");
  kprintf("Marking kernel events as follows:\n");
  kprintf("  ^a   COM2 input interrupt, a received\n");
  kprintf("  ~d   COM2 output interrupt, ordinary char output\n");
  kprintf("  ~e   COM2 output interrupt, echo output\n");
  kprintf("  ~s   COM2 output interrupt, shutdown TX ints\n");
  kprintf("  |(1z-2) process switch from 1, now a zombie, to 2\n");
  kprintf("  |(1b-2) process switch from 1, now blocked, to 2\n");
  kprintf("  |(2-1) process switch (by preemption) from 2 to 1\n");
  kprintf("%s", debug_log_area);	/* the debug log from memory */
  kprintf("\nLEAVE KERNEL!\n\n");
  finale();		/* trap to Tutor */
}

/****************************************************************************/
/* syscallc: this function for the C part of the 0x80 trap handler          */
/* OK to just switch on the system call number here                         */
/* By putting the return value of syswrite, etc. in user_eax, it gets       */
/* popped back in sysentry.s and returned to user in eax                    */
/****************************************************************************/

void syscallc( int user_eax, int devcode, char *buff , int bufflen){
  int nargs;
  int syscall_no = user_eax;

  switch(nargs = sysent[syscall_no].sy_narg)
    {
    case 1:         /* 1-argument system call */
	user_eax = sysent[syscall_no].sy_call(devcode);   /* sysexit */
	break;
    case 3:         /* 3-arg system call: calls sysread or syswrite */
	user_eax = sysent[syscall_no].sy_call(devcode,buff,bufflen); 
	break;
    default: kprintf("bad # syscall args %d, syscall #%d\n",
		     nargs, syscall_no);
    }
} 

/****************************************************************************/
/* sysexit: this function for the exit syscall function */
/****************************************************************************/

int sysexit(int exit_code)
{ 
  cli();
  curproc->p_exitval = exit_code;
  curproc->p_status = ZOMBIE;
  number_of_zombie++; 
  scheduler(2);/*****	JA 2 is a call to this scheduler *****/
  /* never returns */       
  return 0;    /* never happens, but avoids warning about no return value */
}

/****************************************************************************/
/* set_trap_gate: this function for setting the trap gate */
/****************************************************************************/

void set_trap_gate(int n, IntHandler *inthand_addr) {
  debug_set_trap_gate(n, inthand_addr, 0);
}

/* write the nth idt descriptor as a trap gate to inthand_addr */
void debug_set_trap_gate(int n, IntHandler *inthand_addr, int debug) {
  char *idt_addr;
  Gate_descriptor *idt, *desc;
  unsigned int limit = 0;
  extern void locate_idt(unsigned int *, char **);

  if (debug)
    kprintf("Calling locate_idt to do sidt instruction...\n");
  locate_idt(&limit,&idt_addr);
  /* convert to CS seg offset, i.e., ordinary address, then to typed pointer */
  idt = (Gate_descriptor *)(idt_addr - KERNEL_BASE_LA);
  if (debug)
    kprintf("Found idt at %x, lim %x\n",idt, limit);
  desc = &idt[n];               /* select nth descriptor in idt table */
  /* fill in descriptor */
  if (debug)
    kprintf("Filling in desc at %x with addr %x\n",(unsigned int)desc,
           (unsigned int)inthand_addr);
  desc->selector = KERNEL_CS;   /* CS seg selector for int. handler */
  desc->addr_hi = ((unsigned int)inthand_addr)>>16; /* CS seg offset of inthand */
  desc->addr_lo = ((unsigned int)inthand_addr)&0xffff;
  desc->flags = GATE_P|GATE_DPL_KERNEL|GATE_TRAPGATE; /* valid, trap */
  desc->zero = 0;
}

/* append msg to memory debugging log */
void debug_log(char *msg) {
    strcpy(debug_record, msg);
    debug_record +=strlen(msg);
}

/* written by eoneil */
/* modified by kwn 3/02 */

#include <stdio.h>
#include "tsystm.h"
#include "proc.h"
#include "sched.h"
extern void asmswtch(PEntry *oldproc, PEntry *newproc);

/* for debug log report */
#define BUFLEN 100
/* in this file */
static void debug_report_process_switch(PEntry *oldprocp);

/* call this with interrupts off */
/* find next runnable user process */
/* if none, select kernel (null) process */
/* process switch done by asmswtch() */
/* Note that this attempt to be "fair" by remembering where
   we last left off doesn't randomize the output much in
   our case.  If three processes are blocked when wakeup is
   called, they all get marked RUN, and they all do run, A outputs,
   and calls sleep, B sees full-Q and sleeps, C sees full-q and
   sleeps, leaving A the "next" process to run and output again.
*/
void scheduler(int entry) {
  int i,k; 
  PEntry *oldprocp = curproc;
  static int olduproc=0;
  int nextuproc = olduproc==NPROC-1?1:olduproc+1;
	++process_entry_count[entry];
  /* loop from next user process around back to this one */
  for(i=nextuproc, k=0;k<NPROC-1;i==NPROC-1?i=1:i++,k++){
    if (proctab[i].p_status == RUN){
	olduproc = i;
	curproc=&proctab[i];	/* chosen to run */
	break;
    }
  }
  /* if all user processes are blocked, use process 0 */
  if (k==(NPROC-1)) {
      curproc = &proctab[0];
  }
  debug_report_process_switch(oldprocp);
  asmswtch(oldprocp,curproc);
}

/* Record a debug log entry for a process switch--
   put "|(1b-2)" in debug_log if process 1 blocks and 2 runs
   or "|(1z-2)" if process 1 is now a zombie and 2 runs,
   or "|(2-1)" if process 2 is switched to 1 by preemption, etc.
   but don't report on switches from process 0 back to itself
   because they happen too frequently.
*/
static void debug_report_process_switch(PEntry *oldprocp)
{
  char buf[BUFLEN] = "";

  switch (oldprocp->p_status) {
  case ZOMBIE:
      sprintf(buf, "|(%dz-%d)", oldprocp - proctab, curproc - proctab);
      break;
  case BLOCKED:
      sprintf(buf, "|(%db-%d)", oldprocp - proctab, curproc - proctab);
      break;
  case RUN:
      /* Suppress 0-0 reports for better readability */
      /* preemptions are reported here, |(1-2) for ex. */
      if (oldprocp != proctab || curproc != proctab)
	  sprintf(buf, "|(%d-%d)", oldprocp - proctab, curproc - proctab);
      break;
  default:
      kprintf("Unknown proc_status in debug_report_process_switch\n");
      break;
  }
  if (strlen(buf))		/* if buf has been filled, record it */
      debug_log(buf);  /* show process switch in log */
}
/* call this with interrupts off */
/* set current process to BLOCKED on specified event */
/* indicate event and call scheduler to find another process */
void sleep(int event)
{ 
  curproc->p_status = BLOCKED;
  curproc->p_waitcode = event;

  scheduler(0);	/***** JA 0 is for sleep *****/
}

/* wakeup all processes blocked on event */
void wakeup(int event)
{ 
    int k; 

    for(k = 1; k < NPROC; k++)
	if((proctab[k].p_status==BLOCKED) && 
	   (proctab[k].p_waitcode==event)){
	    proctab[k].p_status=RUN; /* wake up process */
	}
}





#include <cpu.h>

#define TEN_MS 0x2e9d
#define QUANTUM 5

extern int total_time;

/* Start ticking service */
void init_ticks(void);

/* Activate a timer */
int set_timer(IntHandler *function, int time, int reinittime);

/* Deactivate a timer */
int stop_timer(IntHandler *function);

/* Shut down ticking service */
void shutdown_ticks(void);

/* tickpack.c 
 * Bob Wilson
 * 05/11/2003
 * A timer package for PC-Tutor
*/	/*****	JA starting with	*****/ 
#include <stdio.h>
#include <timer.h>
#include <pic.h>
#include <cpu.h>
#include "tickpack.h"
#include "proc.h"
#include "sched.h"
#include "tsystm.h"
extern IntHandler irq0inthand;
void smalldelay(void);
void set_timer_count(int);
void irq0inthandc(void);
void tick(void);
/* internal function prototypes */
/*
void set_timer_count(int);
*/
void init_ticks() {

/***** #define DEBUG	*****/

#ifdef DEBUG
  printf("Disabled interrupts in CPU while setting them up\n");
#endif
cli();	
#ifdef DEBUG  
  printf("Setting interrupt gate for timer, irq 0\n");
#endif
  /* irq 0 maps to slot n = 0x20 in IDT for linux setup */
  set_intr_gate(TIMER0_IRQ+IRQ_TO_INT_N_SHIFT, &irq0inthand);
#ifdef DEBUG
  printf("Commanding PIC to interrupt CPU for irq 0\n");
#endif
  pic_enable_irq(TIMER0_IRQ);
#ifdef DEBUG
  printf("Commanding timer to generate a pulse train using max count\n");
#endif
  set_timer_count(0X0);   
#ifdef DEBUG
  printf("Enabling interrupts in CPU\n");
#endif
sti();	
}

int set_timer(IntHandler *callback, int time, int reinit_time) {
  return 0;        /* Error: table full */
}

int stop_timer(IntHandler *function) {
  return 0;        /* Error: timer was not set */
}
void shutdown_ticks() {
  cli();
#ifdef DEBUG
  printf("Commanding PIC to shut off irq 0 to CPU\n");
#endif
  pic_disable_irq(TIMER0_IRQ);  /* disallow irq 0 ints to get to CPU */
  sti();
}

/* about 10 us on a SAPC (400Mhz Pentium) */
void smalldelay(void) {
  int i;
    
  for (i=0;i<1000;i++)
     ;
}

/* Set up timer to count down from given count, then send a tick interrupt, */
/* over and over. A count of 0 sets max count, 65536 = 2**16 */
void set_timer_count(int count) {
  outpt(TIMER_CNTRL_PORT, TIMER0|TIMER_SET_ALL|TIMER_MODE_RATEGEN);
  outpt(TIMER0_COUNT_PORT,count&0xff); /* set LSB here */
  outpt(TIMER0_COUNT_PORT,count>>8); /* and MSB here */
  smalldelay();                 /* give the timer a moment to init. */
}

/* timer interrupt handler */
void irq0inthandc(void) {		/***** JA *****/
	pic_end_int();
	tick();
}

void tick() {								/***** JA *****/
	char *number;
	number[0]='*'; 
	number[2]='\0';

	++curproc->p_ticks;

	switch (curproc->p_number){
		case 1:
			number[1]='1';
			break;
		case 2:
			number[1]='2';
			break;
	}
	if (curproc->p_number == 1 || curproc->p_number == 2)
		debug_log(number);

#ifdef DEBUG
/*****	kprintf("* ");	JA	used to testing *****/
#endif
	if(--curproc->p_quantum == 0) {
		/* preempting, start over with full quantum */ 
		curproc->p_quantum = QUANTUM; 
#ifdef DEBUG				/***** JA *****/
		kprintf("PREEMPTIVE SCHEDULER BEING CALLED\n");
		kprintf("Leavins process %d\n", curproc->process_number);
#endif
		scheduler(3); /**** JA 3 is for preemptive scheduler call to scheduler */
	}
}
